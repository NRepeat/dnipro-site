// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}
enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}
enum UserRole {
  ADMIN
  CUSTOMER
}
model User {
  id    Int     @id @default(autoincrement())
  uid   String  @unique
  email String  @unique
  name  String?
  cart  Cart?
  role UserRole @default(CUSTOMER)
  provider String?
  providerId String?
  orders Order[]
  verificationCode VarificatioCode?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           Int       @id @default(autoincrement())
  uid          String    @unique
  title        String
  slug         String
  description  String?
  category     Category  @relation(fields: [categoryId], references: [id])
  categoryId   Int
  manufacturer Manufacturer @relation(fields: [manufacturerId], references: [id])
  manufacturerId Int  
  model        String @unique 
  status       Boolean
  variants ProductItem[]
  rating       Int       @default(0)
  reviews      Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Category {
  id           Int       @id @default(autoincrement())
  slug         String     @unique
  name         String
  products     Product[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
model ProductItem {
  id           Int     @id @default(autoincrement())
  uid          String @unique
  name         String
  slug         String
  size         Int
  price        String
  color        String
  sales        Int?
  images       Json
  status       Boolean
  quantity     Int    @default(0)
  product    Product  @relation(fields: [productId], references: [id])
  productId   Int
  cartItems CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Cart {
  id           Int          @id @default(autoincrement())
  uid          String
  userId       Int @unique
  user         User?         @relation(fields: [userId], references: [id])
  orders Order[]
  totalAmount Int @default(0)
  token String
  products     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Manufacturer {
  id           Int          @id @default(autoincrement())
  slug String @unique
  name String
  product Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model CartItem {
  id        Int      @id @default(autoincrement())
  cartId     Int
  productItemId Int
  cart      Cart      @relation(fields: [cartId], references: [id])
  productItem   ProductItem  @relation(fields: [productItemId], references: [id])
  quantity  Int    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int @unique
  user      User?         @relation(fields: [userId], references: [id])
  token     String
  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])
  totalAmount Int
  status OrderStatus
  paymentId String?
  items Json
  fulName String
  address String
  email String
  phone String
  comment String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VarificatioCode {
  id        Int      @id @default(autoincrement())
  userId    Int @unique
  user      User         @relation(fields: [userId], references: [id])
  code String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}